// Copyright (C) 2006-2019 Samuel Newbold

void b_argc(const Argm& argm, Error_list& exceptions);
void b_binary(const Argm& argm, Error_list& exceptions);
void b_cd(const Argm& argm, Error_list& exceptions);
void b_collect_errors_except(const Argm& argm, Error_list& exceptions);
void b_collect_errors_only(const Argm& argm, Error_list& exceptions);
void b_combine(const Argm& argm, Error_list& exceptions);
void b_disable_readline(const Argm& argm, Error_list& exceptions);
void b_echo(const Argm& argm, Error_list& exceptions);
void b_else(const Argm& argm, Error_list& exceptions);
void b_else_if(const Argm& argm, Error_list& exceptions);
void b_else_if_not(const Argm& argm, Error_list& exceptions);
void b_enable_readline(const Argm& argm, Error_list& exceptions);
void b_error(const Argm& argm, Error_list& exceptions);
void b_exec(const Argm& argm, Error_list& exceptions);
void b_execution_count(const Argm& argm, Error_list& exceptions);
void b_exit(const Argm& argm, Error_list& exceptions);
void b_fallback_handler(const Argm& argm, Error_list& exceptions);
void b_for(const Argm& argm, Error_list& exceptions);
void b_for_each_line(const Argm& argm, Error_list& exceptions);
void b_fork(const Argm& argm, Error_list& exceptions);
void b_function_all_flags(const Argm& argm, Error_list& exceptions);
void b_function(const Argm& argm, Error_list& exceptions);
void b_get_fallback_message(const Argm& argm, Error_list& exceptions);
void b_get_max_collectible_exceptions(const Argm& argm, Error_list& exceptions);
void b_get_max_extra_exceptions(const Argm& argm, Error_list& exceptions);
void b_get_max_nesting(const Argm& argm, Error_list& exceptions);
void b_getpid(const Argm& argm, Error_list& exceptions);
void b_getppid(const Argm& argm, Error_list& exceptions);
void b_global(const Argm& argm, Error_list& exceptions);
void b_if(const Argm& argm, Error_list& exceptions);
void b_internal_functions(const Argm& argm, Error_list& exceptions);
void b_is_default_error(const Argm& argm, Error_list& exceptions);
void b_is_default_input(const Argm& argm, Error_list& exceptions);
void b_is_default_output(const Argm& argm, Error_list& exceptions);
void b_last_exception(const Argm& argm, Error_list& exceptions);
void b_last_execution_time(const Argm& argm, Error_list& exceptions);
void b_list_environment(const Argm& argm, Error_list& exceptions);
void b_list_executables(const Argm& argm, Error_list& exceptions);
void b_list_locals(const Argm& argm, Error_list& exceptions);
void b_local(const Argm& argm, Error_list& exceptions);
void b_local_declare(const Argm& argm, Error_list& exceptions);
void b_ls(const Argm& argm, Error_list& exceptions);
void b_nop(const Argm& argm, Error_list& exceptions);
void b_replace_exception(const Argm& argm, Error_list& exceptions);
void b_rm_executable(const Argm& argm, Error_list& exceptions);
void b_scope(const Argm& argm, Error_list& exceptions);
void b_selection_set(const Argm& argm, Error_list& exceptions);
void b_set(const Argm& argm, Error_list& exceptions);
void b_set_fallback_message(const Argm& argm, Error_list& exceptions);
void b_set_max_collectible_exceptions(const Argm& argm, Error_list& exceptions);
void b_set_max_extra_exceptions(const Argm& argm, Error_list& exceptions);
void b_set_max_nesting(const Argm& argm, Error_list& exceptions);
void b_source(const Argm& argm, Error_list& exceptions);
void b_stepwise(const Argm& argm, Error_list& exceptions);
void b_store_output(const Argm& argm, Error_list& exceptions);
void b_test_executable_exists(const Argm& argm, Error_list& exceptions);
void b_test_file_exists(const Argm& argm, Error_list& exceptions);
void b_test_greater(const Argm& argm, Error_list& exceptions);
void b_test_in(const Argm& argm, Error_list& exceptions);
void b_test_is_number(const Argm& argm, Error_list& exceptions);
void b_test_less(const Argm& argm, Error_list& exceptions);
void b_test_not_empty(const Argm& argm, Error_list& exceptions);
void b_test_number_equal(const Argm& argm, Error_list& exceptions);
void b_test_string_equal(const Argm& argm, Error_list& exceptions);
void b_test_string_unequal(const Argm& argm, Error_list& exceptions);
void b_throw(const Argm& argm, Error_list& exceptions);
void b_toggle_readline(const Argm& argm, Error_list& exceptions);
void b_total_execution_time(const Argm& argm, Error_list& exceptions);
void b_try_catch_recursive(const Argm& argm, Error_list& exceptions);
void b_type(const Argm& argm, Error_list& exceptions);
void b_unset(const Argm& argm, Error_list& exceptions);
void b_usleep(const Argm& argm, Error_list& exceptions);
void b_usleep_overhead(const Argm& argm, Error_list& exceptions);
void b_var_add(const Argm& argm, Error_list& exceptions);
void b_var_divide(const Argm& argm, Error_list& exceptions);
void b_var_exists(const Argm& argm, Error_list& exceptions);
void b_var_subtract(const Argm& argm, Error_list& exceptions);
void b_version_compatible(const Argm& argm, Error_list& exceptions);
void b_version(const Argm& argm, Error_list& exceptions);
void b_waiting_for_binary(const Argm& argm, Error_list& exceptions);
void b_waiting_for_shell(const Argm& argm, Error_list& exceptions);
void b_waiting_for_user(const Argm& argm, Error_list& exceptions);
void b_whence_function(const Argm& argm, Error_list& exceptions);
void b_which_path(const Argm& argm, Error_list& exceptions);
void b_while(const Argm& argm, Error_list& exceptions);
