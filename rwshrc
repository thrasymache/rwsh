.echo $*0 >/tmp/lcl (
)
.set_max_nesting 50
.for ${.list_environment}$ (-- var val) {.nop
    .if .var_exists $var {.nop $val}
    .else {.nop
      .global $var $val
      .nop $$var}}
.function #! -- ignored ... {.nop $ignored}
.function .autofunction -- cmd [args ...] [.{argfunction}] {.nop
  .if .var_exists args {.nop $args}
  .else {.nop}
  .nop {argfunction}
  .local full_path ${.which_path $cmd $PATH}
  .if .test_executable_exists $full_path {.nop}
  .else {.binary $full_path}
  .if .test_string_equal $cmd $full_path {.nop}
  .else {.function $cmd -- [args ...] {&&full_path $args$}}
  .error added $cmd to executable map $nl}
.function () {.nop}
.scope $argv$ ([--init-file init-file] [-to] [-c command]
               [-rwsh] [rwsh_binary] [script-args ...]) {.nop
  .nop $rwsh_binary$ $-to$ $-c$ $script-args$ $-rwsh$
  .if .var_exists --init-file {.source $init-file}
  .else_if .var_exists -to {.nop $PATH $?
    .unset PATH
    .unset ?
    .global TESTABILITY (an=external var(iable))
    .exec ./rwsh --init-file test_init.rwsh}
  .else_if .var_exists -rwsh {.source /etc/rwshrc-default}
  .else_if .test_not_empty $-c$ $script-args$ {.source /etc/rwshrc-basic}
  .else {.exec /etc/rwshrc-default}
  .if .var_exists -c {
    .function .return_code code cmd [add_stack ...] {
      echo $cmd returned $code : call stack $cmd $add_stack$
      .exit $code}
    .collect_errors_except .nop {
      .mapped_argfunction $argv$2 {$1$}
      .exit 0}}
  .else_if .var_exists script-args {
    .function .return_code code cmd [add_stack ...] {
      echo $cmd returned $code : call stack $cmd $add_stack$
      .exit $code}
    .collect_errors_except .nop {
      .source $script-args$
      .exit 0}}
  .else {.nop}}
