rwsh v0.1
0 $0 $0 $0 $0 $1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 200 $ 1 20 $
0 ${%true}
0 $mismatched brace: %which rwsh.argfunction {
1 $mismatched brace: %which rwsh.argfunction }
1 $multiple argfunctions not supported at this time
1 $cannot specify arguments for rwsh.argfunction directly
1 ${\ {\ {\ {\ {\ {\ {\ {\ {\ {\ {\}}}}}}}}}}}
0 $0 $
0 $# builtin tests
0 $%echo these are fixed strings
these are fixed strings0 $%false
1 $%false 1 2 3 4 5
1 $# %function tested later
0 $%ls /bin /usr/
/bin
/usr/
0 $%printenv
?=0
MAX_NESTING=5
0 $%printenv TERM

0 $%importenv
0 $%printenv TERM
xterm-color
0 $%printenv A

0 $%set A 1
0 $%printenv A
1
0 $%selection_set A //usr
0 $echo /usr
/usr
0 $%selection_set A /
0 $echo /usr/*
/usr/*
0 $%selection_set A local/include
0 $echo /usr/local/include
/usr/local/include
0 $%selection_set A ..
0 $echo /usr
/usr
0 $%selection_set A 
0 $echo /usr
/usr
0 $%selection_set A /local/../../bin
0 $echo /bin
/bin
0 $%true
0 $%true 1 2 3 4 5
0 $%which a
no a
1 $%which #
%function # {%true $*}
0 $%which rwsh.mapped_argfunction
{%true 1 \ \$ \@ $A $0 $# $* $*2 @a @$a @$1 @$*0 @$*2}
0 $%which rwsh.mapped_argfunction
{rwsh.argfunction}
0 $
0 $# binary test implicitly tests Old_argv_t
0 $/bin/echo 1 2 3
1 2 3
0 $/bn/echo 1 2 3
/bn/echo : could not run binary
65280 $
0 $# arg_script tests
0 $echo 5 4 3 2 1
5 4 3 2 1
0 $echo /bin echo /bin
/bin echo /bin
0 $echo 1 2 1 2 $* 3 4 3 4
1 2 1 2 $* 3 4 3 4
0 $echo 1 2 1 2
1 2 1 2
0 $echo /usr
/usr
0 $no file matching pattern /*is* for selection /*is*
echo

0 $echo /bin
/bin
0 $echo /usr/bin /usr/sbin
/usr/bin /usr/sbin
0 $echo /usr/lib /usr/libexec
/usr/lib /usr/libexec
0 $echo /usr/share /usr/standalone
/usr/share /usr/standalone
0 $echo /usr/include /usr/standalone
/usr/include /usr/standalone
0 $%set FIGNORE include
0 $echo /usr/standalone
/usr/standalone
0 $echo /usr/libexec
/usr/libexec
0 $
0 $# function
0 $%function a
0 $%which a
%function a {%true}
0 $a 1 2 3
0 $%function a
0 $%which a
no a
1 $%function a
0 $%which a
%function a {echo 9 $A $1 @//usr}
0 $a
9 /bin  /usr
0 $a 1
9 /bin 1 /usr
0 $a 1 2
9 /bin 1 /usr
0 $%function a
0 $a
a
0 $a 1
1 a 1
0 $a 1 2
1 2 a 1 2
0 $# first test of fn function rather than function builtin
0 $fn e
0 $e a
0 $# first test of function which rather than builtin which
0 $which a
%function a {%function $1 {echo 3 2 1}}
0 $a b
0 $b
3 2 1
0 $# a function redefining itself doesn't seg fault
0 $fn f
0 $f
hi
there
0 $
0 $# internal functions
0 $fn rwsh.executable_not_found
1 $which rwsh.executable_not_found
no rwsh.executable_not_found
1 $which x
no x
1 $x
x : command not found ( x )
1 $which rwsh.executable_not_found
%function rwsh.executable_not_found {%echo $0 : command not found ( $*0 ); %newline; %false}
0 $rwsh.mapped_argfunction 1 2 3
a 1 2 3 a
0 $rwsh.mapped_argfunction
rwsh.mapped_argfunction : command not found ( rwsh.mapped_argfunction )
1 $fn f
0 $f
{which rwsh.argfunction {\}; which rwsh.argfunction {rwsh.argfunction}; which rwsh.argfunction {rwsh.escaped_argfunction}}
{\}
{rwsh.argfunction}
0 $fn rwsh.autofunction
0 $which false
no false
1 $false
256 $which false
%function false {/usr/bin/false $*}
0 $fn rwsh.after_command
after fn rwsh.after_command
0 $fn rwsh.after_command
0 $%set MAX_NESTING 5
0 $fn f
0 $fn g
0 $f
function exceeded MAX_NESTING ( 5 ). call stack: f g f g f g f
0 $fn rwsh.excessive_nesting
0 $f
rwsh.excessive_nesting itself exceeded MAX_NESTING:
f g f g f g rwsh.excessive_nesting
original call stack:
f g f g f g f
0 $
0 $# exiting
0 $exit

