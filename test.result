.function # {.nop}
.global last_command_return -10
.global A \
.global N \
.function rwsh.before_command {.return $last_command_return}

# tests multi-line commands within a sourced script
.function rwsh.after_command {
  .set last_command_return $?
  .echo $nl; .echo $last_command_return; .echo $nl}
.function rwsh.prompt {.echo \$}
.function rwsh.file_open_failure
.function rwsh.shutdown {.echo $nl; .echo now terminating normally; .echo $nl}
.function rwsh.vars {.internal_vars}
.else_if .test_string_equal $2 -c {
  rwsh.mapped_argfunction &3 {.source /etc/rwshrc-basic; $1$; .exit}}
.else {
  .echo unexpected command line: &* (
)
  .source /etc/rwshrc-default}
rwsh.help not defined 
$# .init is tested by having test_init.sh define #

-10
$

-10
$# argv tests

-10
$.nop

-10
$     .nop

-10
$.nop 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

-10
$.echo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
0
$.echo  ()    1                2       $#
 1 2 5
0
$.echo \escaped internal\ space $#
escaped internal space 4
0
$.echo now \ external\  $#
now  external  4
0
$.echo a \  space $#
a   space 5
0
$.echo \$tokens \} \{ \; \\ \) \(
$tokens } { ; \ ) (
0
$.echo a \
a 
0
$line continuation
line : command not found ( line continuation ) 

-1
$.which_executable rwsh.mapped_argfunction {.nop}
{.nop}
0
$.which_executable rwsh.argfunction {
  multiple line argfunction }
{; multiple line argfunction}
0
$.nop rwsh.argfunction rwsh.mismatched_brace } 
rwsh.mismatched_brace : command not found ( rwsh.mismatched_brace .nop rwsh.argfunction rwsh.mismatched_brace } ) 

-1
$.nop multiple statements \; on a line

-1
$.which_executable rwsh.argfunction {rwsh.multiple_argfunctions} {}
rwsh.multiple_argfunctions : command not found ( rwsh.multiple_argfunctions ) 

-1
$.which_executable rwsh.argfunction {rwsh.argfunction with text args}
rwsh.arguments_for_argfunction : command not found ( rwsh.arguments_for_argfunction rwsh.argfunction ) 

-1
$.which_executable rwsh.argfunction {rwsh.argfunction {with a function arg}}
rwsh.arguments_for_argfunction : command not found ( rwsh.arguments_for_argfunction rwsh.argfunction ) 

-1
$.which_executable rwsh.argfunction {{{{{{{{{{{}}}}}}}}}}}
{{{{{{{{{{{}}}}}}}}}}}
0
$

0
$# ability of functions to immitate built-ins

0
$.function f {.function $1 {rwsh.argfunction}}

0
$f w {.which_executable $1 {rwsh.argfunction}}

0
$f e {.echo $*}

0
$f m {rwsh.argfunction}

0
$w e
{.echo $*}
0
$w () {}
{.nop}
0
$e text that doesn't have a prompt appended
text that doesn't have a prompt appended
0
$m {e again}
again
0
$

0
$# arg_script tests

0
$.set A /bin

0
$e 5 4 3 2 1
5 4 3 2 1
0
$e $A $0 @$A
/bin e /bin
0
$e 1 2 $* 3 4
1 2 1 2 $* 3 4 3 4
0
$e $*2 1 2
1 2 1 2
0
$e A $1 1 $$3 $$$3
A A 1 A /bin
0
$e A 1 2 3 4 5 6 7 $$$$$$$$$8
A 1 2 3 4 5 6 7 /bin
0
$e &&A
rwsh.not_soon_enough : command not found ( rwsh.not_soon_enough &&A ) 

-1
$m {e &&&A}
rwsh.not_soon_enough : command not found ( rwsh.not_soon_enough &&&A ) 

-1
$e &{e &&A}
rwsh.not_soon_enough : command not found ( rwsh.not_soon_enough &&A ) 

-1
$e &&{e &A}
rwsh.not_soon_enough : command not found ( rwsh.not_soon_enough &&{e &A} ) 

-1
$e &A
/bin
0
$.if .nop 1 2 3 {e &*}
.nop 1 2 3
0
$.else {}

0
$.if .nop 1 2 3 {e &*0}
.if .nop 1 2 3
0
$.else {}

0
$m {.set A not_bin; e &A &&A $A $nl; m {.set A otherwise; e &A &&A &&&A $A}}
/bin not_bin not_bin 
/bin not_bin otherwise otherwise
0
$.set A /bin

0
$m {.set A not_bin
   e &{.echo $A} &&{.echo $A} $A $nl
   m {.set A otherwise
      e &{.echo $A} &&{.echo $A} &&&{.echo $A} $A}}
/bin not_bin not_bin 
/bin not_bin otherwise otherwise
0
$.set A /bin

0
$m {.set A not_bin; e &{.echo &A} &&{.echo &A &&A}}
/bin /bin not_bin
0
$m &{.echo $A} {e $1 &1}
not_bin &{.echo $A}
0
$m $FOO {}
rwsh.undefined_variable : command not found ( rwsh.undefined_variable FOO ) 
rwsh.undefined_variable : command not found ( rwsh.undefined_variable FOO ) 

-1
$m {e $FOO}
rwsh.undefined_variable : command not found ( rwsh.undefined_variable FOO rwsh.mapped_argfunction m ) 

-1
$m &{.return 1} {}
rwsh.failed_substitution : command not found ( rwsh.failed_substitution &{.return 1} ) 

-1
$m {e &{.return 1}}
rwsh.failed_substitution : command not found ( rwsh.failed_substitution &{.return 1} ) 

-1
$m {e &&{.return 1}; e after}
rwsh.failed_substitution : command not found ( rwsh.failed_substitution &{.return 1} rwsh.mapped_argfunction m ) 

-1
$f rwsh.failed_substitution {e &&{.return 1}}

0
$m {e &&{.return 1}; e after}
signal handler itself triggered signal
&{.return 1} rwsh.failed_substitution
original call stack:
&{.return 1} rwsh.mapped_argfunction m

-1
$f rwsh.failed_substitution

0
$# bad_argfunction_style

0
$e x{e x}
rwsh.bad_argfunction_style : command not found ( rwsh.bad_argfunction_style x{e x} ) 

-1
$e @/etc
/etc
0
$# rwsh.selection_not_found

0
$e @/*is*
rwsh.selection_not_found : command not found ( rwsh.selection_not_found /*is* /*is* ) 
rwsh.argument_count : command not found ( rwsh.argument_count .echo e ) 

-1
$e @test_main.cc
rwsh.selection_not_found : command not found ( rwsh.selection_not_found test_main.cc test_main.cc ) 
rwsh.argument_count : command not found ( rwsh.argument_count .echo e ) 

-1
$e @/bin
/bin
0
$e @/usr/*bin
/usr/bin /usr/sbin
0
$e @/etc/rwsh*
/etc/rwshrc /etc/rwshrc-basic /etc/rwshrc-default
0
$e @/etc/rw*ic
/etc/rwshrc-basic
0
$e @/etc/rwsh*a*
/etc/rwshrc-basic /etc/rwshrc-default
0
$.set FIGNORE *de*

0
$e @/etc/rwsh*a*
/etc/rwshrc-basic
0
$e @/usr/*l*i*b*x*e*
/usr/libexec
0
$e @test_main.sh
test_main.sh
0
$e @*hrc*
rwshrc rwshrc-basic
0
$.set A r*h.cc sel*.h

0
$e @$A
rwsh.cc selection.h
0
$.return &{.return 0}
rwsh.not_a_number : command not found ( rwsh.not_a_number  .return ) 

-1
$.return &{e 0 $nl}
rwsh.not_a_number : command not found ( rwsh.not_a_number 0 
 .return ) 

-1
$.return &{.echo 0}

0
$e nevermore &{/bin/echo quoth the raven} 
nevermore quoth the raven

0
$.set A ((zero zero) (one one) two three)

0
$m $A$$ {e $* $#}
rwsh.invalid_word_selection : command not found ( rwsh.invalid_word_selection $$ ) 

-1
$m $A {e $# $*}
2 (zero zero) (one one) two three
0
$m $A$ {e $# $*}
5 zero zero one one two three
0
$m $A$1 {e $# $*}
2 one one
0
$m $A$10 {e $# $*}
rwsh.undefined_variable : command not found ( rwsh.undefined_variable $A$10 ) 

-1
$m &{e ((zero zero) (one one) two three)}@ {e $# $*}
rwsh.invalid_word_selection : command not found ( rwsh.invalid_word_selection @ ) 

-1
$m &{e ((zero zero) (one one) two three)}$$ {e $# $*}
rwsh.invalid_word_selection : command not found ( rwsh.invalid_word_selection $ ) 

-1
$m &{e ((zero zero) (one one) two three)} {e $# $*}
2 (zero zero) (one one) two three
0
$m &{e ((zero zero) (one one) two three)}$ {e $# $*}
5 zero zero one one two three
0
$m &{e ((zero zero) (one one) two three)}$1 {e $# $*}
2 one one
0
$m &{e ((zero zero) (one one) two three)}$10 {e $# $*}
rwsh.undefined_variable : command not found ( rwsh.undefined_variable &{e (zero zero) (one one) two three}$10 ) 

-1
$m &{e (zero zero) \)one one two three}$1 {e $# $*}
rwsh.mismatched_parenthesis : command not found ( rwsh.mismatched_parenthesis zero zero ) ) 

-1
$m &{e (zero zero) \)one one two three} {e $# $*}
2 zero zero )one one two three
0
$e a (tight string created by parentheses $#) $#
a tight string created by parentheses $# 4
0
$e a ( spaced string created by parentheses $# ) $#
a  spaced string created by parentheses $#  4
0
$e some escaped \) \(parentheses $#
some escaped ) (parentheses 6
0
$e some (nested (parentheses) $#) $#
some nested (parentheses) $# 4
0
$e some ((((((((((repeated))))) parentheses))))) $#
some (((((((((repeated))))) parentheses)))) 4
0
$e a (multi-line parenthesis
  enclosed string) $#
a multi-line parenthesis
  enclosed string 4
0
$e a )mismatched parenthesis
rwsh.mismatched_parenthesis : command not found ( rwsh.mismatched_parenthesis e a ) ) 

-1
$e a (multi-line parenthesis
  mismatch))
rwsh.mismatched_parenthesis : command not found ( rwsh.mismatched_parenthesis e a (multi-line parenthesis
  mismatch)) ) 

-1
$e (internal \)parenthesis \\ escape ) $#
rwsh.mismatched_parenthesis : command not found ( rwsh.mismatched_parenthesis e (internal \)parenthesis \\ escape ) ) 

-1
$.unset A

0
$

0
$# file redirection (but don't overwrite files that exist)

0
$# .for_each_line

0
$.if .ls dummy_file {.exit}

0
$.else {}

0
$/bin/cat <dummy_file
rwsh.file_open_failure : command not found ( rwsh.file_open_failure rwsh.file_open_failure dummy_file /bin/cat ) 

-1
$.for_each_line <dummy_file {e line of $# \( $* \)}
rwsh.file_open_failure : command not found ( rwsh.file_open_failure dummy_file .for_each_line ) 

-1
$m {e hi >dummy_file >another}
rwsh.double_redirection : command not found ( rwsh.double_redirection >dummy_file >another ) 

-1
$m {e hi >dummy_file}

0
$/bin/cat dummy_file
hi
0
$.if .return 0 {>dummy_file /bin/echo there}

0
$.else {.nop}

0
$/bin/cat dummy_file
there

0
$m {m >dummy_file {e line 1 $nl; e line 2 longer $nl; .echo $nl; e ending}}

0
$/bin/cat <dummy_file
line 1 
line 2 longer 

ending
0
$.for_each_line x {}
rwsh.argument_count : command not found ( rwsh.argument_count .for_each_line ) 

-1
$.for_each_line <dummy_file
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .for_each_line ) 

-1
$.for_each_line <dummy_file <another {}
rwsh.double_redirection : command not found ( rwsh.double_redirection <dummy_file <another ) 

-1
$.for_each_line <dummy_file {e line of $# \( $* \) $nl}
line of 3 ( line 1 ) 
line of 4 ( line 2 longer ) 
line of 1 ( ) 
line of 2 ( ending ) 

0
$/bin/rm dummy_file

0
$

0
$# soon level promotion

0
$.global A 0

0
$.set MAX_NESTING 44

0
$f x {.var_add A 1
     m {.var_add A 1
        m {.var_add A 1
           m {.var_add A 1
              m {.var_add A 1
                 m {rwsh.argfunction}}}}}}

0
$x {e &A &&A $A}
0 5 5
0
$.set A 0

0
$x {x {x {x {e &A &&A &&&A &&&&A &&&&&A $A}}}}
0 5 10 15 20 20
0
$.set A 0

0
$x {e &{.echo &A $A} &&{.echo &A &&A $A} $A}
0 0 0 5 5 5
0
$.set A 0

0
$x {x {x {x {e &{.echo &A $A} &&{.echo &A &&A $A} &&&{.echo &A &&A &&&A $A} &&&&{.echo &A &&A &&&A &&&&A $A} &&&&&{.echo &A &&A &&&A &&&&A &&&&&A $A} $A}}}}
0 0 0 5 5 0 5 10 10 0 5 10 15 15 0 5 10 15 20 20 20
0
$f x

0
$.set MAX_NESTING 5

0
$.unset A

0
$

0
$# builtin tests

0
$# .cd

0
$.cd
rwsh.argument_count : command not found ( rwsh.argument_count .cd ) 

-1
$.cd /bin {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .cd ) 

-1
$.cd /bin /
rwsh.argument_count : command not found ( rwsh.argument_count .cd ) 

-1
$.cd /bin

0
$/bin/pwd
/bin

0
$

0
$# .combine

0
$.combine
rwsh.argument_count : command not found ( rwsh.argument_count .combine ) 

-1
$.combine something {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .combine ) 

-1
$.combine on () e \ two ( ) $#
one two 7
0
$

0
$# .echo

0
$.echo
rwsh.argument_count : command not found ( rwsh.argument_count .echo ) 

-1
$.echo something {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .echo ) 

-1
$.echo these are fixed strings
these are fixed strings
0
$

0
$# .exec .fork

0
$.fork
rwsh.argument_count : command not found ( rwsh.argument_count .fork ) 

-1
$.fork e text
text
0
$.fork .return 1

256
$.exec
rwsh.argument_count : command not found ( rwsh.argument_count .exec ) 

-1
$.exec something {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .exec ) 

-1
$.fork m {.exec /bin/echo something; /bin/echo else}
something

0
$

0
$# .for

0
$.for {e no arguments $1}
rwsh.argument_count : command not found ( rwsh.argument_count .for ) 

-1
$.for no_argfunction
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .for ) 

-1
$.for 1 {e one argument $1}
one argument 1
0
$.for 1 2 3 4 {e four arguments $1 $nl}
four arguments 1 
four arguments 2 
four arguments 3 
four arguments 4 

0
$

0
$# .function

0
$.function
rwsh.argument_count : command not found ( rwsh.argument_count .function ) 

-1
$.function /bin/echo {.echo $* $nl}

1
$.function .exit {.nop}

2
$.function rwsh.escaped_argfunction {.nop}

3
$.function a {.nop}

0
$.which_executable a
{.nop}
0
$a 1 2 3

0
$.function a

0
$.which_executable a

1
$.global A \

0
$.echo () A () A () $#
 A  A  7
0
$.function a {e 9 $A $1 @/usr}

0
$.which_executable a
{e 9 $A $1 @/usr}
0
$a \
9   /usr
0
$a 1
9  1 /usr
0
$a 1 2
9  1 /usr
0
$.function a {e $*5 $* $*0 $nl}

0
$a
a 

0
$a 1
1 a 1 

0
$a 1 2
1 2 a 1 2 

0
$f g {.function $1 {.function $1 {rwsh.argfunction}}}

0
$g a {e 3 2 1 $nl}

0
$w a
{.function $1 {e 3 2 1 $nl}}
0
$a b

0
$b
3 2 1 

0
$# a function redefining itself doesn't seg fault

0
$f g {e hi $nl; f g {e there $nl}; f h {e nothing here}; g}

0
$g
hi 
there 

0
$

0
$# .global .unset .var_exists 

0
$.global
rwsh.argument_count : command not found ( rwsh.argument_count .global ) 

-1
$.global x y z
rwsh.argument_count : command not found ( rwsh.argument_count .global ) 

-1
$.global x y {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .global ) 

-1
$.unset
rwsh.argument_count : command not found ( rwsh.argument_count .unset ) 

-1
$.unset x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .unset ) 

-1
$.unset x y
rwsh.argument_count : command not found ( rwsh.argument_count .unset ) 

-1
$.var_exists
rwsh.argument_count : command not found ( rwsh.argument_count .var_exists ) 

-1
$.var_exists x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .var_exists ) 

-1
$.var_exists x y
rwsh.argument_count : command not found ( rwsh.argument_count .var_exists ) 

-1
$.global 100 nihilism

2
$.unset #

3
$.unset *

3
$.unset 1

3
$.unset MAX_NESTING

2
$.var_exists #

0
$.var_exists *

0
$.var_exists 0

0
$.var_exists 2

1
$.var_exists x

1
$.unset x

1
$.global x nihilism

0
$.var_exists x

0
$e $x
nihilism
0
$.global x nihilism

1
$.unset x

0
$.var_exists x

1
$.return 0

0
$

0
$# .store_output

0
$.store_output x
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .store_output ) 

-1
$.store_output {e some text}
rwsh.argument_count : command not found ( rwsh.argument_count .store_output ) 

-1
$.store_output x {e some text}
rwsh.undefined_variable : command not found ( rwsh.undefined_variable x .store_output ) 

-1
$.global x ()

0
$.store_output x {e some text; .return 1}

1
$e $x

0
$.store_output x {e some text}

0
$e $x
some text
0
$.unset x

0
$

0
$# .if .else_if .else_if_not .else

0
$.if
rwsh.argument_count : command not found ( rwsh.argument_count .if ) 

-1
$.else_if
rwsh.argument_count : command not found ( rwsh.argument_count .else_if ) 

-1
$.else_if_not
rwsh.argument_count : command not found ( rwsh.argument_count .else_if_not ) 

-1
$.else
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .else ) 

-1
$.if missing argfunction
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .if ) 

-1
$.else_if missing argfunction
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .else_if ) 

-1
$.else_if_not missing argfunction
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .else_if_not ) 

-1
$.if .return 0 {e if true; .return 1}
if true
1
$.else {e else true; .return 3}

1
$.if .return 1 {e if false; .return 4}

0
$.else {e else false; .return 5}
else false
5
$.else_if .return 0 {e not this one; .return 6}
rwsh.else_without_if : command not found ( rwsh.else_without_if .else_if ) 

-1
$.else_if_not .return 1 {e not this one; .return 7}
rwsh.else_without_if : command not found ( rwsh.else_without_if .else_if_not ) 

-1
$.if .return 1 {e nor this; .return 8}

0
$.else_if .return 1 {e nor this; .return 9}

0
$.else_if .return 0 {e but this; .return 10}
but this
10
$.else_if .return 0 {e this should be skipped; .return 11}

10
$.else_if .return 1 {e and certainly this; .return 12}

10
$.else {e nor this; .return 13}

10
$.if .return 1 {e nor this; .return 14}

0
$.else_if_not .return 0 {e nor this; .return 15}

0
$.else_if_not .return 1 {e but this; .return 16}
but this
16
$.else_if_not .return 1 {e this should be skipped; .return 17}

16
$.else_if_not .return 0 {e and certainly this; .return 18}

16
$.else {e nor this; .return 19}

16
$.if .return 0 {.if .return 1 {
	   not to be printed; .return 20}
       .else_if .return 0 {
	   e nested else_if; .return 21}}
rwsh.bad_if_nest : command not found ( rwsh.bad_if_nest .if ) 

-1
$.else {e else_if failed to appropriately set IF_TEST on exit; .return 22}
rwsh.else_without_if : command not found ( rwsh.else_without_if .else ) 

-1
$.if .nop {e set up}

0
$.if .nop {e if before else}
rwsh.if_before_else : command not found ( rwsh.if_before_else .if ) 

-1
$.if .return 0 {.else_if .return 0 {e nested syntax; .return 23}}
rwsh.else_without_if : command not found ( rwsh.else_without_if .else_if rwsh.mapped_argfunction .if ) 

-1
$.else {e already tested; .return 24}
rwsh.else_without_if : command not found ( rwsh.else_without_if .else ) 

-1
$

-1
$# .internal_errors .internal_features .internal_vars

-1
$.internal_errors 1
wrong argument count
-1
$.internal_features 1
wrong argument count
-1
$.internal_vars 1
wrong argument count
-1
$.internal_errors
rwsh.arguments_for_argfunction rwsh.bad_argfunction_style rwsh.binary_not_found rwsh.double_redirection rwsh.excessive_nesting rwsh.executable_not_found rwsh.failed_substitution rwsh.invalid_word_selection rwsh.mismatched_brace rwsh.multiple_argfunctions rwsh.not_soon_enough rwsh.selection_not_found rwsh.sighup rwsh.sigint rwsh.sigquit rwsh.sigpipe rwsh.sigterm rwsh.sigtstp rwsh.sigusr1 rwsh.sigusr2 rwsh.undefined_variable rwsh.unreadable_dir
0
$.internal_features
rwsh.after_command rwsh.before_command rwsh.prompt rwsh.raw_command rwsh.run_logic rwsh.shutdown rwsh.vars
0
$.internal_vars
FIGNORE IF_TEST MAX_NESTING
0
$

0
$# .is_default_input .is_default_output .is_default_error

0
$.is_default_input 1
rwsh.argument_count : command not found ( rwsh.argument_count .is_default_input ) 

-1
$.is_default_input {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .is_default_input ) 

-1
$m {.is_default_input <dummy_file}

1
$m {.is_default_input}

0
$.is_default_output 1
rwsh.argument_count : command not found ( rwsh.argument_count .is_default_output ) 

-1
$.is_default_output {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .is_default_output ) 

-1
$e &{.is_default_output; .echo $?}
1
0
$m {.is_default_output >dummy_file}

1
$m {.is_default_output}

0
$.is_default_error 1
rwsh.argument_count : command not found ( rwsh.argument_count .is_default_error ) 

-1
$.is_default_error {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .is_default_error ) 

-1
$m {.is_default_error}

0
$

0
$# .ls

0
$.ls
rwsh.argument_count : command not found ( rwsh.argument_count .ls ) 

-1
$.ls /bin {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .ls ) 

-1
$.ls /bin /usr/
/bin
/usr/

0
$

0
$# .nop

0
$.nop

0
$.nop {optional argfunc}

0
$.nop 1 2 3 4 5

0
$

0
$# .return

0
$.return
rwsh.argument_count : command not found ( rwsh.argument_count .return ) 

-1
$.return 1 1
rwsh.argument_count : command not found ( rwsh.argument_count .return ) 

-1
$.return 0 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .return ) 

-1
$.return 0

0
$.return 1

1
$.return \
rwsh.not_a_number : command not found ( rwsh.not_a_number  .return ) 

-1
$.return O
rwsh.not_a_number : command not found ( rwsh.not_a_number O .return ) 

-1
$.return 1E2
rwsh.not_a_number : command not found ( rwsh.not_a_number 1E2 .return ) 

-1
$.return 2147483647

2147483647
$.return 2147483649
rwsh.input_range : command not found ( rwsh.input_range 2147483649 .return ) 

-1
$.return -2147483649
rwsh.input_range : command not found ( rwsh.input_range -2147483649 .return ) 

-1
$

-1
$# .selection_set

-1
$.selection_set A
rwsh.argument_count : command not found ( rwsh.argument_count .selection_set ) 

-1
$.selection_set A /usr {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .selection_set ) 

-1
$.selection_set A /usr

0
$e $A
/usr
0
$.selection_set A ./

0
$e $A
/usr/*
0
$.selection_set A local/include

0
$e $A
/usr/local/include
0
$.selection_set A ..

0
$e $A
/usr
0
$.selection_set A ()

0
$e $A
/usr
0
$.selection_set A ./local/../../bin

0
$e $A
/bin
0
$.selection_set A sbin etc

0
$e $A
/sbin etc
0
$

0
$# .set

0
$.set A
rwsh.argument_count : command not found ( rwsh.argument_count .set ) 

-1
$.set B x
rwsh.undefined_variable : command not found ( rwsh.undefined_variable B .set ) 

-1
$.set B x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .set ) 

-1
$.set IF_TEST x

2
$.set A x

0
$e $A
x
0
$

0
$# .source

0
$.source
rwsh.argument_count : command not found ( rwsh.argument_count .source ) 

-1
$.source /etc/hosts {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .source ) 

-1
$.source /*fu*bar*
rwsh.file_open_failure : command not found ( rwsh.file_open_failure /*fu*bar* .source ) 

-1
$# if you actually have that file, something is seriously wrong

-1
$.source /etc/hosts
rwsh.not_executable : command not found ( rwsh.not_executable /etc/hosts .source ) 

-1
$# .source is tested by having test_init.sh define #

-1
$w .init
{.set MAX_NESTING 4; .function rwsh.file_open_failure {.echo init file $1 does not exist (call stack $*2 ) 
}; .source /etc/rwshrc $*; .if .which_test rwsh.help {.if .test_not_empty &&{rwsh.help} {.nop}; .else {.echo rwsh.help produces no output 
}}; .else {.echo rwsh.help not defined 
}}
0
$

0
$# .stepwise

0
$f wrapper {a $* two; a $* three}

0
$f a {e $* one $nl; e $* two $nl; e $* three $nl}

0
$f d {e $* $nl; .stepwise $* {d $*}}

0
$.stepwise {e $* $nl}
rwsh.argument_count : command not found ( rwsh.argument_count .stepwise ) 

-1
$.stepwise wrapper 1 2
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .stepwise ) 

-1
$.stepwise stepwise {e $* $nl}

1
$.stepwise .stepwise {e $* $nl}

2
$.stepwise wrapper 1 2 {e $* $nl}
a 1 2 two 
a 1 2 three 

0
$f wrapper {a $* one; a $* two; a $* three}

0
$wrapper 1 2
1 2 one one 
1 2 one two 
1 2 one three 
1 2 two one 
1 2 two two 
1 2 two three 
1 2 three one 
1 2 three two 
1 2 three three 

0
$.stepwise wrapper 1 2 {d $*}
a 1 2 one 
rwsh.excessive_nesting : command not found ( rwsh.excessive_nesting rwsh.mapped_argfunction a .stepwise d rwsh.mapped_argfunction wrapper .stepwise ) 

-1
$.stepwise wrapper 1 2 {e $* $nl}
a 1 2 one 
a 1 2 two 
a 1 2 three 

0
$.set A $MAX_NESTING

0
$.set MAX_NESTING 12

0
$.stepwise wrapper 1 2 {d $*}
a 1 2 one 
e 1 2 one one 
 
.echo 1 2 one one 
 
e 1 2 one two 
 
.echo 1 2 one two 
 
e 1 2 one three 
 
.echo 1 2 one three 
 
a 1 2 two 
e 1 2 two one 
 
.echo 1 2 two one 
 
e 1 2 two two 
 
.echo 1 2 two two 
 
e 1 2 two three 
 
.echo 1 2 two three 
 
a 1 2 three 
e 1 2 three one 
 
.echo 1 2 three one 
 
e 1 2 three two 
 
.echo 1 2 three two 
 
e 1 2 three three 
 
.echo 1 2 three three 
 

2
$.set MAX_NESTING $A 

0
$

0
$# .test_string_equal .test_string_unequal .test_not_empty

0
$.test_string_equal x
rwsh.argument_count : command not found ( rwsh.argument_count .test_string_equal ) 

-1
$.test_string_equal x x x
rwsh.argument_count : command not found ( rwsh.argument_count .test_string_equal ) 

-1
$.test_string_equal x x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_string_equal ) 

-1
$.test_string_unequal x 
rwsh.argument_count : command not found ( rwsh.argument_count .test_string_unequal ) 

-1
$.test_string_unequal x x x
rwsh.argument_count : command not found ( rwsh.argument_count .test_string_unequal ) 

-1
$.test_string_unequal x x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_string_unequal ) 

-1
$.test_not_empty 
rwsh.argument_count : command not found ( rwsh.argument_count .test_not_empty ) 

-1
$.test_not_empty x x
rwsh.argument_count : command not found ( rwsh.argument_count .test_not_empty ) 

-1
$.test_not_empty x {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_not_empty ) 

-1
$.test_string_equal x y

1
$.test_string_equal x x

0
$.test_string_unequal x y

0
$.test_string_unequal x x

1
$.test_not_empty \

1
$.test_not_empty x

0
$

0
$# .test_is_number .test_number_equal .test_greater .test_less

0
$.test_is_number
rwsh.argument_count : command not found ( rwsh.argument_count .test_is_number ) 

-1
$.test_is_number 42 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_is_number ) 

-1
$.test_is_number ()

1
$.test_is_number 42a

1
$.test_is_number 42

0
$.test_is_number -0.314

0
$.test_is_number 6.022e9000000000

2
$.test_is_number 6.022e23

0
$.test_number_equal 42
rwsh.argument_count : command not found ( rwsh.argument_count .test_number_equal ) 

-1
$.test_number_equal 42 42 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_number_equal ) 

-1
$.test_number_equal 42 42a
rwsh.not_a_number : command not found ( rwsh.not_a_number 42a .test_number_equal ) 

-1
$.test_number_equal 42b 42
rwsh.not_a_number : command not found ( rwsh.not_a_number 42b .test_number_equal ) 

-1
$.test_number_equal 0 0.000000000000000000000000001

1
$.test_number_equal 1e-9000000000 1e-9000000001
rwsh.input_range : command not found ( rwsh.input_range 1e-9000000000 .test_number_equal ) 

-1
$.test_number_equal 0 0.0

0
$.test_number_equal 42 42.01

1
$.test_number_equal 42 42

0
$.test_number_equal 6.022e9000000000 .6022e24
rwsh.input_range : command not found ( rwsh.input_range 6.022e9000000000 .test_number_equal ) 

-1
$.test_number_equal 6.022e23 .6022e9000000001
rwsh.input_range : command not found ( rwsh.input_range .6022e9000000001 .test_number_equal ) 

-1
$.test_number_equal 6.022e23 6.022e2

1
$.test_number_equal 6.022e23 .6022e24

0
$.test_greater 6.022e23
rwsh.argument_count : command not found ( rwsh.argument_count .test_greater ) 

-1
$.test_greater 6.022e23c 6.022e23 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_greater ) 

-1
$.test_greater 6.022e23c 6.022e23
rwsh.not_a_number : command not found ( rwsh.not_a_number 6.022e23c .test_greater ) 

-1
$.test_greater 6.022e23 6.022e23e
rwsh.not_a_number : command not found ( rwsh.not_a_number 6.022e23e .test_greater ) 

-1
$.test_greater 6.022e9000000000 .6022e23
rwsh.input_range : command not found ( rwsh.input_range 6.022e9000000000 .test_greater ) 

-1
$.test_greater 6.022e23 .6022e9000000001
rwsh.input_range : command not found ( rwsh.input_range .6022e9000000001 .test_greater ) 

-1
$.test_greater 6.022e2 6.022e23

1
$.test_greater 6.022e23 .6022e24

1
$.test_greater 6.022e23 6.022e2

0
$.test_less 6.022e23
rwsh.argument_count : command not found ( rwsh.argument_count .test_less ) 

-1
$.test_less 6.022b23 6.022e23 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .test_less ) 

-1
$.test_less 6.022b23 6.022e23
rwsh.not_a_number : command not found ( rwsh.not_a_number 6.022b23 .test_less ) 

-1
$.test_less 6.022e23 6.022a23
rwsh.not_a_number : command not found ( rwsh.not_a_number 6.022a23 .test_less ) 

-1
$.test_less 6.022e9000000000 .6022e23
rwsh.input_range : command not found ( rwsh.input_range 6.022e9000000000 .test_less ) 

-1
$.test_less 6.022e23 .6022e9000000001
rwsh.input_range : command not found ( rwsh.input_range .6022e9000000001 .test_less ) 

-1
$.test_less 6.022e23 6.022e2

1
$.test_less 6.022e23 .6022e24

1
$.test_less 6.022e2 6.022e23

0
$

0
$# .which_executable .which_test .which_return

0
$.which_test
rwsh.argument_count : command not found ( rwsh.argument_count .which_test ) 

-1
$.which_test j

1
$.which_test #

0
$.which_test rwsh.mapped_argfunction

1
$.which_test rwsh.mapped_argfunction {rwsh.argfunction}

0
$.which_executable
rwsh.argument_count : command not found ( rwsh.argument_count .which_executable ) 

-1
$.which_executable j

1
$.which_executable #
{.nop}
0
$w rwsh.mapped_argfunction {.nop 1 () \ \\ \$ \@}
{.nop 1 () \ \ \$ \@}
0
$w rwsh.mapped_argfunction {.nop 1 () \  \\ \$ \@}
{.nop 1 () \  \\ \$ \@}
0
$w rwsh.mapped_argfunction {$A $$A $0 $$$1 $# $* $*2 $A$ $$*$ $$$*12$}
{$A $$A $0 $$$1 $# $* $*2 $A$ $$*$ $$$*12$}
0
$w rwsh.mapped_argfunction {&&A &&0 &&* &&*3 &&$A$ &&*$ &&*6$}
{&A &0 &* &*3 &$A$ &*$ &*6$}
0
$w rwsh.mapped_argfunction {@a @$a @$1 @$* @$*2}
{@a @$a @$1 @$*1 @$*2}
0
$w rwsh.mapped_argfunction {>dummy_file}
{>dummy_file}
0
$.which_executable rwsh.mapped_argfunction

1
$.which_executable rwsh.mapped_argfunction {rwsh.argfunction}
{rwsh.argfunction}
0
$.waiting_for_shell j
rwsh.argument_count : command not found ( rwsh.argument_count .waiting_for_shell ) 

-1
$.waiting_for_shell {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .waiting_for_shell ) 

-1
$# .waiting_for_shell

-1
$.waiting_for_user j
rwsh.argument_count : command not found ( rwsh.argument_count .waiting_for_user ) 

-1
$.waiting_for_user {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .waiting_for_user ) 

-1
$# .waiting_for_user

-1
$.waiting_for_binary j
rwsh.argument_count : command not found ( rwsh.argument_count .waiting_for_binary ) 

-1
$.waiting_for_binary {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .waiting_for_binary ) 

-1
$# .waiting_for_binary

-1
$.which_return
rwsh.argument_count : command not found ( rwsh.argument_count .which_return ) 

-1
$.which_return rwsh.mapped_argfunction

2
$.which_return rwsh.mapped_argfunction {rwsh.argfunction}

2
$.which_return .which_return
2
0
$.which_return j

1
$.which_return #
-1
0
$

0
$# .usleep .which_execution_count .which_last_execution_time

0
$# .which_total_execution_time

0
$.usleep
rwsh.argument_count : command not found ( rwsh.argument_count .usleep ) 

-1
$.usleep 8000 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .usleep ) 

-1
$.usleep -6
rwsh.input_range : command not found ( rwsh.input_range -6 .usleep ) 

-1
$.usleep 5i
rwsh.not_a_number : command not found ( rwsh.not_a_number 5i .usleep ) 

-1
$.usleep 8000

0
$.which_execution_count
rwsh.argument_count : command not found ( rwsh.argument_count .which_execution_count ) 

-1
$.which_execution_count j

1
$.which_execution_count .usleep
5
0
$.which_last_execution_time
rwsh.argument_count : command not found ( rwsh.argument_count .which_last_execution_time ) 

-1
$.which_last_execution_time j

1
$# .which_last_execution_time .usleep

1
$.which_total_execution_time
rwsh.argument_count : command not found ( rwsh.argument_count .which_total_execution_time ) 

-1
$.which_total_execution_time j

1
$# .which_total_execution_time .usleep

1
$

1
$# .which_path

1
$.which_path cat
rwsh.argument_count : command not found ( rwsh.argument_count .which_path ) 

-1
$.which_path cat /bin {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .which_path ) 

-1
$.which_path cat \

1
$.which_path does<not>exist /bin:/usr/bin

1
$.which_path cat /bin:/usr/bin
/bin/cat
0
$

0
$# .while

0
$.function tf {.test_string_unequal $A $N}

0
$.set A 0

0
$.set N 4

0
$.while {e ARGS}
rwsh.argument_count : command not found ( rwsh.argument_count .while ) 

-1
$.while tf
rwsh.missing_argfunction : command not found ( rwsh.missing_argfunction .while ) 

-1
$.while tf {e printed; .set A 4}
printed
0
$.while tf {e skipped}

-1
$.set A 0

0
$.while tf {e in .while argfunction $A $nl; .var_add A 1}
in .while argfunction 0 
in .while argfunction 1 
in .while argfunction 2 
in .while argfunction 3 

0
$.set A 0

0
$.while tf {.if .return $A {.set A 1}
           .else {.function tf {.return 1}}
           e in overwriting argfunction $nl}
in overwriting argfunction 
in overwriting argfunction 

0
$

0
$# .var_add

0
$.var_add
rwsh.argument_count : command not found ( rwsh.argument_count .var_add ) 

-1
$.var_add A 1 2
rwsh.argument_count : command not found ( rwsh.argument_count .var_add ) 

-1
$.var_add A 1 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .var_add ) 

-1
$.var_add B 1
rwsh.undefined_variable : command not found ( rwsh.undefined_variable B .var_add ) 

-1
$.set A A

0
$.var_add A 2 
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_add ) 

-1
$.set A 1e309

0
$.var_add A 2 
rwsh.input_range : command not found ( rwsh.input_range 1e309 .var_add ) 

-1
$.set A -1e308

0
$.var_add A A
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_add ) 

-1
$.var_add A 1e309
rwsh.input_range : command not found ( rwsh.input_range 1e309 .var_add ) 

-1
$.var_add A -1e308
rwsh.result_range : command not found ( rwsh.result_range -1e308 -1e308 .var_add ) 

-1
$.var_add A 1e308

0
$.var_add A 1e308

0
$e $A
1e+308
0
$.var_add A 1e308
rwsh.result_range : command not found ( rwsh.result_range 1e+308 1e308 .var_add ) 

-1
$.var_add A -1e308

0
$e $A
0
0
$.var_add A \
rwsh.not_a_number : command not found ( rwsh.not_a_number  .var_add ) 

-1
$e $A
0
0
$

0
$# .var_divide

0
$.var_divide A
rwsh.argument_count : command not found ( rwsh.argument_count .var_divide ) 

-1
$.var_divide A 1 2
rwsh.argument_count : command not found ( rwsh.argument_count .var_divide ) 

-1
$.var_divide A 1 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .var_divide ) 

-1
$.var_divide B 1
rwsh.undefined_variable : command not found ( rwsh.undefined_variable B .var_divide ) 

-1
$.set A A

0
$.var_divide A 2 
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_divide ) 

-1
$.set A 1e3000000000

0
$.var_divide A 2 
rwsh.input_range : command not found ( rwsh.input_range 1e3000000000 .var_divide ) 

-1
$.set A 16.8

0
$.var_divide A A
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_divide ) 

-1
$.var_divide A 1e3000000000
rwsh.input_range : command not found ( rwsh.input_range 1e3000000000 .var_divide ) 

-1
$.var_divide A 0 
rwsh.divide_by_zero : command not found ( rwsh.divide_by_zero 16.8 .var_divide ) 

-1
$.var_divide A 4.2 

0
$e $A
4
0
$.set A 1.8e-20

0
$.var_divide A 1e308
rwsh.result_range : command not found ( rwsh.result_range 1.8e-20 1e308 .var_divide ) 

-1
$.set A 0

0
$.var_divide A 1e308

0
$e $A
0
0
$

0
$# .var_subtract

0
$.var_subtract
rwsh.argument_count : command not found ( rwsh.argument_count .var_subtract ) 

-1
$.var_subtract A 1 2
rwsh.argument_count : command not found ( rwsh.argument_count .var_subtract ) 

-1
$.var_subtract A 1 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .var_subtract ) 

-1
$.var_subtract B 1
rwsh.undefined_variable : command not found ( rwsh.undefined_variable B .var_subtract ) 

-1
$.set A A

0
$.var_subtract A 2 
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_subtract ) 

-1
$.set A 3000000000

0
$.var_subtract A 2 

0
$.set A 1e308

0
$.var_subtract A -1e308
rwsh.result_range : command not found ( rwsh.result_range 1e308 -1e308 .var_subtract ) 

-1
$e $A
1e308
0
$.set A -2147483648

0
$.var_subtract A A
rwsh.not_a_number : command not found ( rwsh.not_a_number A .var_subtract ) 

-1
$.var_subtract A 3000000000

0
$.var_subtract A -2147483648

0
$.var_subtract A 2147483647

0
$.var_subtract A 2147483647

0
$e $A
-7.29496e+09
0
$.var_subtract A 2147483647

0
$.var_subtract A -2147483648

0
$e $A
-7.29496e+09
0
$.var_subtract A \
rwsh.not_a_number : command not found ( rwsh.not_a_number  .var_subtract ) 

-1
$e $A
-7.29496e+09
0
$

0
$# .version .version_available .version_compatible

0
$.version 1.0
rwsh.argument_count : command not found ( rwsh.argument_count .version ) 

-1
$.version {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .version ) 

-1
$.version_available 1.0
rwsh.argument_count : command not found ( rwsh.argument_count .version_available ) 

-1
$.version_available {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .version_available ) 

-1
$.version_compatible
rwsh.argument_count : command not found ( rwsh.argument_count .version_compatible ) 

-1
$.version_compatible 1.0 1.0
rwsh.argument_count : command not found ( rwsh.argument_count .version_compatible ) 

-1
$.version_compatible 1.0 {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .version_compatible ) 

-1
$.version
0.2.1+
0
$.version_available
0.2.1+
0
$.version_compatible 1.0

1
$.version_compatible 0.2.1+

0
$

0
$# binary test implicitly tests Old_argv_t

0
$/bn/echo 1 2 3
rwsh.binary_not_found : command not found ( rwsh.binary_not_found /bn/echo ) 

65280
$/bin/echo 1 2 3
1 2 3

0
$

0
$# internal functions 

0
$# rwsh.after_command rwsh.raw_command rwsh.prompt

0
$# all of these are used as part of the test itself. If this changes, then the 

0
$# following tests will fail.

0
$w rwsh.after_command
{; .set last_command_return $?; .echo $nl; .echo $last_command_return; .echo $nl}
0
$w rwsh.prompt
{.echo \$}
0
$w rwsh.raw_command
{.echo $1; .echo $nl}
0
$

0
$# rwsh.arguments_for_argfunction rwsh.before_command rwsh.binary_not_found

0
$w x {rwsh.escaped_argfunction me}
rwsh.arguments_for_argfunction : command not found ( rwsh.arguments_for_argfunction rwsh.escaped_argfunction ) 

-1
$f rwsh.before_command {.echo $*0; .echo $nl}

0
$/bn
rwsh.before_command /bn
rwsh.binary_not_found : command not found ( rwsh.binary_not_found /bn ) 

65280
$f rwsh.before_command
rwsh.before_command f rwsh.before_command

0
$

0
$# rwsh.autofunction

0
$w z

1
$f rwsh.autofunction {e $*0 $nl}

0
$z 1 2 3
rwsh.autofunction z 1 2 3 
z : command not found ( z 1 2 3 ) 

-1
$w z

1
$f rwsh.autofunction {y $*0}

0
$z 1 2 3
y : command not found ( y rwsh.autofunction z 1 2 3 ) 
z : command not found ( z 1 2 3 ) 

-1
$w z

1
$f rwsh.autofunction {f $1 {e $* $nl}}

0
$z 1 2 3
1 2 3 

0
$w z
{e $* $nl}
0
$f rwsh.autofunction

0
$

0
$# rwsh.double_redirection

0
$# m {e hi #>dummy_file >dummy_file}

0
$# m {e hi >dummy_file}

0
$# m {e &{e hi #>dummy_file}}

0
$

0
$# rwsh.executable_not_found

0
$f rwsh.executable_not_found

0
$w rwsh.executable_not_found

1
$w x

1
$x
x : command not found ( x ) 

-1
$w rwsh.executable_not_found
{.echo $1 : command not found ( $* ) 
; .return -1}
0
$

0
$# rwsh.mapped_argfunction rwsh.unescaped_argfunction rwsh.argfunction

0
$# rwsh.escaped_argfunction

0
$rwsh.mapped_argfunction 1 2 3 {e a $* a}
a 1 2 3 a
0
$rwsh.mapped_argfunction
rwsh.mapped_argfunction : command not found ( rwsh.mapped_argfunction ) 

-1
$f g {w rwsh.argfunction {rwsh.unescaped_argfunction}
     w rwsh.argfunction {rwsh.argfunction}
     w rwsh.argfunction {rwsh.escaped_argfunction}}

0
$g {}
{w rwsh.argfunction {}; w rwsh.argfunction {rwsh.argfunction}; w rwsh.argfunction {rwsh.escaped_argfunction}}{}{rwsh.argfunction}
0
$

0
$# rwsh.excessive_nesting

0
$f g {h}

0
$f h {g}

0
$g
rwsh.excessive_nesting : command not found ( rwsh.excessive_nesting g h g h g h g ) 

-1
$f rwsh.excessive_nesting {h}

0
$g
signal handler itself triggered signal
g h g h g h rwsh.excessive_nesting
original call stack:
g h g h g h g

-1
$

0
$# rwsh.run_logic

0
$f rwsh.run_logic {.if .return $1 {.nop}; .else_if $*2 {.nop}; .else {.nop}}

0
$0 e don't print

0
$1 e do print
do print
0
$1 f rwsh.run_logic

0
$1 e executable not found
1 : command not found ( 1 e executable not found ) 

-1
$

0
$# rwsh.undefined_variable

0
$e $WRONG $WWRONG
rwsh.undefined_variable : command not found ( rwsh.undefined_variable WRONG ) 
$e &WWRONG
rwsh.undefined_variable : command not found ( rwsh.undefined_variable WWRONG ) 
$

0
$# rwsh.vars

0
$rwsh.vars
FIGNORE IF_TEST MAX_NESTING
0
$

0
$# check for extraneous variables

0
$/usr/bin/printenv
?=0
A=-7.29496e+09
FIGNORE=*de*
MAX_NESTING=5
N=4
last_command_return=0
nl=


0
$

0
$# .importenv_preserve .importenv_overwrite

0
$.global SHELL unmodified

0
$.importenv_preserve x
rwsh.argument_count : command not found ( rwsh.argument_count .importenv_preserve ) 

-1
$.importenv_preserve {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .importenv_preserve ) 

-1
$.importenv_preserve

0
$e $TESTABILITY
an external variable
0
$e $SHELL
unmodified
0
$.unset TESTABILITY

0
$.importenv_overwrite x
rwsh.argument_count : command not found ( rwsh.argument_count .importenv_overwrite ) 

-1
$.importenv_overwrite {excess argfunc}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .importenv_overwrite ) 

-1
$.importenv_overwrite

0
$e $TESTABILITY
an external variable
0
$e $SHELL
/bin/rwsh
0
$

0
$# exiting rwsh.shutdown

0
$.exit excess_argument
rwsh.argument_count : command not found ( rwsh.argument_count .exit ) 

-1
$.exit {excess argfunction}
rwsh.excess_argfunction : command not found ( rwsh.excess_argfunction .exit ) 

-1
$.exit

0

now terminating normally
